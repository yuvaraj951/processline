{"version":3,"sources":["../../src/flowchart/NodeViewModel.js"],"names":["FlowChart","NodeViewModel","nodeDataModel","data","flowchart","inputConnectors","createConnectorsViewModel","Data","_selected","name","x","y","width","numConnectors","Math","max","length","computeConnectorY","connectorDataModel","connectorsDataModel","connectorsViewModel","connectorViewModel","ConnectorViewModel","push","addConnector","nodesDataModel","nodesViewModel","i"],"mappings":";;;;;;;;;;;;;;;AAAQA,e,cAAAA,S;;;;;;;;;;;;;;;;;;;;;+BAEKC,a;AACP,+BAAYC,aAAZ,EAA0B;AAAA;;AAC9B,eAAKC,IAAL,GAAYD,aAAZ;AACA,eAAKE,SAAL,GAAe,IAAIJ,SAAJ,EAAf;AACA,eAAKK,eAAL,GAAuB,KAAKD,SAAL,CAAeE,yBAAf,CAAyC,KAAKH,IAAL,CAAUI,IAAnD,EAAyD,CAAzD,EAA4D,IAA5D,CAAvB;AACA,eAAKC,SAAL,GAAiB,KAAjB;AACO;AACP;;;;;;AAMA;;AAEA;;;AAGA;AACA;AACA;;;;;iCACO;AACN,mBAAO,KAAKL,IAAL,CAAUM,IAAV,IAAkB,EAAzB;AACA;;;8BAKG;AACH,mBAAO,KAAKN,IAAL,CAAUO,CAAjB;AACA;;;8BAKG;AACH,mBAAO,KAAKP,IAAL,CAAUQ,CAAjB;AACA;;;kCAKO;AACP,mBAAO,KAAKR,IAAL,CAAUS,KAAjB;AACA;;;mCAKQ;AACR,gBAAIC,gBACHC,KAAKC,GAAL,CACC,KAAKV,eAAL,CAAqBW,MADtB,CADD;AAGA,mBAAO,KAAKZ,SAAL,CAAea,iBAAf,CAAiCJ,aAAjC,CAAP;AACA;;;mCAKQ;AACR,iBAAKL,SAAL,GAAiB,IAAjB;AACA;;;qCAKU;AACV,iBAAKA,SAAL,GAAiB,KAAjB;AACA;;;2CAKgB;AAChB,iBAAKA,SAAL,GAAiB,CAAC,KAAKA,SAAvB;AACA;;;qCAKU;AACV,mBAAO,KAAKA,SAAZ;AACA;;;uCAIYU,kB,EAAoBR,C,EAAGS,mB,EAAqBC,mB,EAAqB;AAC7E,gBAAIC,qBAAoB,KAAKjB,SAAL,CAAekB,kBAAf,CAAkCJ,kBAAlC,EAAsDR,CAAtD,EACrB,KAAKN,SAAL,CAAea,iBAAf,CAAiCG,oBAAoBJ,MAArD,CADqB,EACyC,IADzC,CAAxB;;AAGAG,gCAAoBI,IAApB,CAAyBL,kBAAzB;;AAEA;AACAE,gCAAoBG,IAApB,CAAyBF,kBAAzB;AACA;;;4CAKiBH,kB,EAAoB;;AAErC,gBAAI,CAAC,KAAKf,IAAL,CAAUI,IAAf,EAAqB;AACpB,mBAAKJ,IAAL,CAAUI,IAAV,GAAiB,EAAjB;AACA;AACD,iBAAKiB,YAAL,CAAkBN,kBAAlB,EAAsC,CAAtC,EAAyC,KAAKf,IAAL,CAAUI,IAAnD,EAAyD,KAAKA,IAA9D;AACA;;;+CAUmBkB,c,EAAgB;AACpC,gBAAIC,iBAAiB,EAArB;;AAEA,gBAAID,cAAJ,EAAoB;AACnB,mBAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,eAAeT,MAAnC,EAA2C,EAAEW,CAA7C,EAAgD;AACnCD,+BAAeH,IAAf,CAAoB,IAAItB,aAAJ,CAAkBwB,eAAeE,CAAf,CAAlB,CAApB;AACZ;AACD;;AAED,mBAAOD,cAAP;AACA","file":"NodeViewModel.js","sourcesContent":["import {FlowChart} from './flowchart'\r\n\r\nexport class NodeViewModel {\r\n      constructor(nodeDataModel){\r\n\t\tthis.data = nodeDataModel;\r\n\t\tthis.flowchart=new FlowChart();\r\n\t\tthis.inputConnectors = this.flowchart.createConnectorsViewModel(this.data.Data, 0, this);\r\n\t\tthis._selected = false;\r\n        }\r\n\t\t/*// set the default width value of the node\r\n\t\tif (!this.data.width || this.data.width < 0) {\r\n\t\t\tthis.data.width = this.flowchart.defaultNodeWidth;\r\n\t\t}\r\n\t\t*/\r\n\r\n\t\t//this.outputConnectors = createConnectorsViewModel(this.data.outputConnectors, this.data.width, this);\r\n\r\n\t\t// Set to true when the node is selected.\r\n\r\n\r\n\t\t//\r\n\t\t// Name of the node.\r\n\t\t//\r\n\t\tname() {\r\n\t\t\treturn this.data.name || \"\";\r\n\t\t};\r\n\r\n\t\t//\r\n\t\t// X coordinate of the node.\r\n\t\t//\r\n\t\tx() {\r\n\t\t\treturn this.data.x;\r\n\t\t};\r\n\r\n\t\t//\r\n\t\t// Y coordinate of the node.\r\n\t\t//\r\n\t\ty() {\r\n\t\t\treturn this.data.y;\r\n\t\t};\r\n\r\n\t\t//\r\n\t\t// Width of the node.\r\n\t\t//\r\n\t\twidth() {\r\n\t\t\treturn this.data.width;\r\n\t\t}\r\n\r\n\t\t//\r\n\t\t// Height of the node.\r\n\t\t//\r\n\t\theight() {\r\n\t\t\tvar numConnectors =\r\n\t\t\t\tMath.max(\r\n\t\t\t\t\tthis.inputConnectors.length);\r\n\t\t\treturn this.flowchart.computeConnectorY(numConnectors);\r\n\t\t}\r\n\r\n\t\t//\r\n\t\t// Select the node.\r\n\t\t//\r\n\t\tselect() {\r\n\t\t\tthis._selected = true;\r\n\t\t};\r\n\r\n\t\t//\r\n\t\t// Deselect the node.\r\n\t\t//\r\n\t\tdeselect() {\r\n\t\t\tthis._selected = false;\r\n\t\t};\r\n\r\n\t\t//\r\n\t\t// Toggle the selection state of the node.\r\n\t\t//\r\n\t\ttoggleSelected() {\r\n\t\t\tthis._selected = !this._selected;\r\n\t\t};\r\n\r\n\t\t//\r\n\t\t// Returns true if the node is selected.\r\n\t\t//\r\n\t\tselected() {\r\n\t\t\treturn this._selected;\r\n\t\t};\r\n\r\n\t\t//\r\n\t\t// Internal function to add a connector.\r\n\t\taddConnector(connectorDataModel, x, connectorsDataModel, connectorsViewModel) {\r\n\t\t\tvar connectorViewModel =this.flowchart.ConnectorViewModel(connectorDataModel, x,\r\n\t\t\t\t\t\tthis.flowchart.computeConnectorY(connectorsViewModel.length), this);\r\n\r\n\t\t\tconnectorsDataModel.push(connectorDataModel);\r\n\r\n\t\t\t// Add to node's view model.\r\n\t\t\tconnectorsViewModel.push(connectorViewModel);\r\n\t\t}\r\n\r\n\t\t//\r\n\t\t// Add an input connector to the node.\r\n\t\t//\r\n\t\taddInputConnector(connectorDataModel) {\r\n\r\n\t\t\tif (!this.data.Data) {\r\n\t\t\t\tthis.data.Data = [];\r\n\t\t\t}\r\n\t\t\tthis.addConnector(connectorDataModel, 0, this.data.Data, this.Data);\r\n\t\t};\r\n\r\n\t\t//\r\n\t\t// Add an ouput connector to the node.\r\n\t\t//\r\n\r\n\r\n\t//\r\n\t// Wrap the nodes data-model in a view-model.\r\n\t//\r\n\tcreateNodesViewModel(nodesDataModel) {\r\n\t\tvar nodesViewModel = [];\r\n\r\n\t\tif (nodesDataModel) {\r\n\t\t\tfor (var i = 0; i < nodesDataModel.length; ++i) {\r\n                nodesViewModel.push(new NodeViewModel(nodesDataModel[i]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn nodesViewModel;\r\n\t};\r\n}"]}