{"version":3,"sources":["../../src/flowchart/ChartViewModel.js"],"names":["ChartViewModel","chartViewModel","data","nodeID","i","nodes","length","node","id","Error","connectorIndex","findNode","Data","nodeDataModel","push","select","deselect","deltaX","deltaY","selectedNodes","getSelectedNodes","x","y","ctrlKey","toggleSelected","deselectAll","nodeIndex","indexOf","splice","newNodeViewModels","newNodeDataModels","deletedNodeIds","selected","selectionRect","width","height"],"mappings":"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","file":"ChartViewModel.js","sourcesContent":["//import {NodeViewModel} from './NodeViewModel';\n\n\n export class ChartViewModel{\n         constructor(chartViewModel){\n           this.data=chartViewModel;\n           //this.nodeviewmodel=new NodeViewModel(this.data.nodes);\n           //this.nodes = this.nodeviewmodel.createNodesViewModel(this.data.nodes);\n           //this.nodes=this.data.nodes;\n\n         }\n\n\t\t//\n\t\t// Find a specific node within the chart.\n\t\t//\n\t\tfindNode(nodeID) {\n\n\t\t\tfor (var i = 0; i < this.nodes.length; ++i) {\n\t\t\t\tvar node = this.nodes[i];\n\t\t\t\tif (node.data.id == nodeID) {\n\t\t\t\t\treturn node;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new Error(\"Failed to find node \" + nodeID);\n\t\t};\n\n\t\t//\n\t\t// Find a specific input connector within the chart.\n\t\t//\n\t\tfindInputConnector(nodeID, connectorIndex) {\n\n\t\t\tvar node = this.findNode(nodeID);\n\n\t\t\tif (!node.Data || node.Data.length <= connectorIndex) {\n\t\t\t\tthrow new Error(\"Node \" + nodeID + \" has invalid input connectors.\");\n\t\t\t}\n\n\t\t\treturn node.Data[connectorIndex];\n\t\t};\n\n\n\t\t// Add a node to the view model.\n\t\t//\n\t\taddNode(nodeDataModel) {\n\t\t\tif (!this.data.nodes) {\n\t\t\t\tthis.data.nodes = [];\n\t\t\t}\n\n\t\t\t//\n\t\t\t// Update the data model.\n\t\t\t//\n\n\t\t\tthis.data.nodes.push(nodeDataModel);\n\n\t\t\t//\n\t\t\t// Update the view model.\n\t\t\t//\n\t\t\t//this.nodes.push(new NodeViewModel(nodeDataModel));\n\t\t}\n\n\t\t//\n\t\t// Select all nodes and connections in the chart.\n\t\t//\n\t\tselectAll() {\n\n\t\t\tvar nodes = this.nodes;\n\t\t\tfor (var i = 0; i < nodes.length; ++i) {\n\t\t\t\tvar node = nodes[i];\n\t\t\t\tnode.select();\n\t\t\t}\n\n\t\t\t}\n\n\t\t//\n\t\t// Deselect all nodes and connections in the chart.\n\t\t//\n\t\tdeselectAll() {\n\n\t\t\tvar nodes = this.nodes;\n\t\t\tfor (var i = 0; i < nodes.length; ++i) {\n\t\t\t\tvar node = nodes[i];\n\t\t\t\tnode.deselect();\n\t\t\t}\n\n\n\t\t};\n\n\t\t//\n\t\t// Update the location of the node and its connectors.\n\t\t//\n\t\tupdateSelectedNodesLocation(deltaX, deltaY) {\n\n\t\t\tvar selectedNodes = this.getSelectedNodes();\n\n\t\t\tfor (var i = 0; i < selectedNodes.length; ++i) {\n\t\t\t\tvar node = selectedNodes[i];\n\t\t\t\tnode.data.x += deltaX;\n\t\t\t\tnode.data.y += deltaY;\n\t\t\t}\n\t\t};\n\n\t\t//\n\t\t// Handle mouse click on a particular node.\n\t\t//\n\t\thandleNodeClicked(node, ctrlKey) {\n\n\t\t\tif (ctrlKey) {\n\t\t\t\tnode.toggleSelected();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.deselectAll();\n\t\t\t\tnode.select();\n\t\t\t}\n\n\t\t\t// Move node to the end of the list so it is rendered after all the other.\n\t\t\t// This is the way Z-order is done in SVG.\n\n\t\t\tvar nodeIndex = this.nodes.indexOf(node);\n\t\t\tif (nodeIndex == -1) {\n\t\t\t\tthrow new Error(\"Failed to find node in view model!\");\n\t\t\t}\n\t\t\tthis.nodes.splice(nodeIndex, 1);\n\t\t\tthis.nodes.push(node);\n\t\t};\n\n\n\n\t\t//\n\t\t// Delete all nodes and connections that are selected.\n\t\t//\n\t\tdeleteSelected() {\n\n\t\t\tvar newNodeViewModels = [];\n\t\t\tvar newNodeDataModels = [];\n\n\t\t\tvar deletedNodeIds = [];\n\n\t\t\t//\n\t\t\t// Sort nodes into:\n\t\t\t//\t\tnodes to keep and\n\t\t\t//\t\tnodes to delete.\n\t\t\t//\n\n\t\t\tfor (var nodeIndex = 0; nodeIndex < this.nodes.length; ++nodeIndex) {\n\n\t\t\t\tvar node = this.nodes[nodeIndex];\n\t\t\t\tif (!node.selected()) {\n\t\t\t\t\t// Only retain non-selected nodes.\n\t\t\t\t\tnewNodeViewModels.push(node);\n\t\t\t\t\tnewNodeDataModels.push(node.data);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Keep track of nodes that were deleted, so their connections can also\n\t\t\t\t\t// be deleted.\n\t\t\t\t\tdeletedNodeIds.push(node.data.id);\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\t//\n\t\t\t// Remove connections that are selected.\n\t\t\t// Also remove connections for nodes that have been deleted.\n\t\t\t//\n\n\n\t\t\t//\n\t\t\t// Update nodes and connections.\n\t\t\t//\n\t\t\tthis.nodes = newNodeViewModels;\n\t\t\tthis.data.nodes = newNodeDataModels;\n\n\t\t};\n\n\t\t//\n\t\t// Select nodes and connections that fall within the selection rect.\n\t\t//\n\t\tapplySelectionRect(selectionRect) {\n\n\t\t\tthis.deselectAll();\n\n\t\t\tfor (var i = 0; i < this.nodes.length; ++i) {\n\t\t\t\tvar node = this.nodes[i];\n\t\t\t\tif (node.x() >= selectionRect.x &&\n\t\t\t\t\tnode.y() >= selectionRect.y &&\n\t\t\t\t\tnode.x() + node.width() <= selectionRect.x + selectionRect.width &&\n\t\t\t\t\tnode.y() + node.height() <= selectionRect.y + selectionRect.height)\n\t\t\t\t{\n\t\t\t\t\t// Select nodes that are within the selection rect.\n\t\t\t\t\tnode.select();\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t};\n\n\t\t//\n\t\t// Get the array of nodes that are currently selected.\n\t\t//\n\t\tgetSelectedNodes() {\n\t\t\tvar selectedNodes = [];\n\n\t\t\tfor (var i = 0; i < this.nodes.length; ++i) {\n\t\t\t\tvar node = this.nodes[i];\n\t\t\t\tif (node.selected()) {\n\t\t\t\t\tselectedNodes.push(node);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn selectedNodes;\n\t\t};\n\n\t\t//\n\t\t// Get the array of connections that are currently selected.\n\t\t//\n\n\n\n\t};"]}